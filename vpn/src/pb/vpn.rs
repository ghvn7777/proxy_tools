// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DomainAddr {
    #[prost(string, tag = "1")]
    pub domain: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub port: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DestinationAddr {
    #[prost(oneof = "destination_addr::Addr", tags = "1, 2, 3")]
    pub addr: ::core::option::Option<destination_addr::Addr>,
}
/// Nested message and enum types in `DestinationAddr`.
pub mod destination_addr {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Addr {
        #[prost(string, tag = "1")]
        V4(::prost::alloc::string::String),
        #[prost(string, tag = "2")]
        V6(::prost::alloc::string::String),
        #[prost(message, tag = "3")]
        Domain(super::DomainAddr),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CommandRequest {
    #[prost(uint32, tag = "1")]
    pub port_id: u32,
    #[prost(oneof = "command_request::Command", tags = "2, 3")]
    pub command: ::core::option::Option<command_request::Command>,
}
/// Nested message and enum types in `CommandRequest`.
pub mod command_request {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Command {
        #[prost(message, tag = "2")]
        Connect(super::DestinationAddr),
        #[prost(bytes, tag = "3")]
        Data(::prost::alloc::vec::Vec<u8>),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CommandResponse {
    #[prost(uint32, tag = "1")]
    pub port_id: u32,
    #[prost(oneof = "command_response::Response", tags = "2, 3")]
    pub response: ::core::option::Option<command_response::Response>,
}
/// Nested message and enum types in `CommandResponse`.
pub mod command_response {
    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
    #[repr(i32)]
    pub enum ConnectStatus {
        Ok = 0,
        Error = 1,
    }
    impl ConnectStatus {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                ConnectStatus::Ok => "OK",
                ConnectStatus::Error => "ERROR",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "OK" => Some(Self::Ok),
                "ERROR" => Some(Self::Error),
                _ => None,
            }
        }
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Response {
        #[prost(enumeration = "ConnectStatus", tag = "2")]
        Connect(i32),
        #[prost(bytes, tag = "3")]
        Data(::prost::alloc::vec::Vec<u8>),
    }
}
